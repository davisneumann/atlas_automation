{
	"info": {
		"_postman_id": "84c280a2-159c-49d7-b990-44bdc958073f",
		"name": "MergeToMaster",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Revisions Approve To Become Officals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7f380f1-4c89-4720-8889-baf728a2f4d5",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.globals.set(\"jsonData\",JSON.parse(responseBody));",
							"",
							"",
							"//write to counsel the jsonData variable",
							"console.log(\"Hello\");",
							"console.log(jsonData);",
							"",
							"console.log(jsonData.total);",
							"console.log(jsonData.issues[1])",
							"",
							"",
							"pm.globals.set(\"loopCount\",0);",
							"pm.globals.set(\"numOfLoops\",jsonData.issues.length);",
							"/*jsonData.issues.forEach(function(issue)",
							"{",
							"    //console.log(issue.key);",
							"    if (issue.fields.customfield_10171.accountId !== null){",
							"         //console.log(issue.fields.assignee.accountId);",
							"        console.log(\"not null\")",
							"    }",
							"    else{",
							"        console.log(\"null\")",
							"    }",
							"});*/",
							"",
							"//console.log(numOfissues);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1643d8be-d0b3-48d1-8f3e-e7d2d6abe29d",
						"exec": [
							"pm.globals.set(\"jql\", ",
							"\"project%20%3D%20OPS%20AND%20issuetype%20%3D%20Revision%20AND%20status%20%3D%20\\\"Approved%20to%20Become%20Official\\\"%20ORDER%20BY%20priority%20DESC\" )"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{sourceUrl}}/rest/api/3/search?jql={{jql}}",
					"protocol": "https",
					"host": [
						"{{sourceUrl}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"search"
					],
					"query": [
						{
							"key": "jql",
							"value": "{{jql}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Loop For Each Revision",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "47b8e244-917c-40e8-ad19-62e06839eb47",
						"exec": [
							"var loopCount = pm.globals.get(\"loopCount\");",
							"var numOfLoops =pm.globals.get(\"numOfLoops\");",
							"var jsonData =pm.globals.get(\"jsonData\");",
							"",
							"",
							"",
							"",
							"console.log(loopCount);",
							"console.log(numOfLoops);",
							"",
							"",
							"",
							"",
							"if (loopCount<numOfLoops){",
							"    //another person record, let's go",
							"    pm.globals.set(\"artifactKey\",jsonData.issues[loopCount].fields.parent.key)",
							"    pm.globals.set(\"revisionKey\",jsonData.issues[loopCount].key )",
							"    pm.globals.set(\"revisionSummary\", jsonData.issues[loopCount].fields.summary)",
							"    ",
							"    console.log(\"Going through loop for revision and artifact\");",
							"    console.log(\"Artifact Key: \" + jsonData.issues[loopCount].fields.parent.key)",
							"    console.log(\"Revision Key: \" + jsonData.issues[loopCount].key)",
							"    console.log(\"Revision Summary: \" + jsonData.issues[loopCount].fields.summary)",
							"    ",
							"    ",
							"    if (jsonData.issues[loopCount].fields.parent.key !== null){",
							"    //console.log(issue.fields.assignee.accountId);",
							"        //postman.setNextRequest(\"Create Atlas 101 Training Checklist\");",
							"        //pm.globals.set('goto', 'MyRequest');",
							"    }",
							"    else",
							"    {",
							"        console.log(\"No assignee for\" + jsonData.issues[loopCount].key);",
							"        postman.setNextRequest(\"Loop For Each Revision\");",
							"        pm.globals.set('goto', 'MyRequest');",
							"        loopCount=loopCount+1;",
							"        pm.globals.set(\"loopCount\",loopCount);",
							"",
							"        ",
							"    }",
							"    ",
							"}",
							"else",
							"{",
							"    console.log(\"End Of Loop\")",
							"    postman.setNextRequest(\"null\");",
							"    pm.globals.set('goto', 'MyRequest');",
							"    ",
							"    ",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?test=123",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "test",
							"value": "123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Possible Pages That Are Parent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5880cd1a-16bf-45f4-9046-0d69de46df11",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"    //console.log(\"Size of Payload: \",jsonData.size)",
							"    //console.log(\"Limit of Results: \",jsonData.limit)",
							"",
							"pm.globals.set(\"pageSize\", jsonData.size)",
							"pm.globals.set(\"pageLimit\", jsonData.limit)",
							"//pm.globals.set(\"webuiArray\",null);",
							"",
							"var pageIdArray = [];",
							"var webuiArray = [];",
							"var artifactTitleArray = [];",
							"",
							"jsonData.results.forEach(function(pageResult)",
							"{",
							"",
							"   //var myRegex = new RegExp(\"(.+-\\d+):\",\"gm\");//the g caused problems in group return",
							"   var revKey = pm.globals.get(\"artifactKey\")",
							"   var myRegex = new RegExp(revKey + \":\");",
							"   //console.log(\"reveKey: \"  + revKey)",
							"   ",
							"   regGroup = (pageResult.title).match(myRegex)",
							"   //console.log(\"regGroup\" + regGroup)",
							"   //console.log(regGroup != null)",
							"   ",
							"   if(regGroup != null){",
							"       //console.log(\"Printing group: \" + regGroup[1])",
							"       pageIdArray.push(pageResult.id)",
							"       webuiArray.push(pageResult._links.webui)",
							"       artifactTitleArray.push(pageResult.title)",
							"   }",
							"   ",
							"  ",
							"});",
							"",
							"// console.log(\"Key array: \" +  keyArray)",
							"// console.log(\"Webuis: \" +  webuiArray)",
							"",
							"",
							"pm.globals.set(\"loopCount\",0);",
							"//pm.globals.set(\"numOfLoops\",keyArray.length);",
							"pm.globals.set(\"pageIdArray\",pageIdArray);",
							"pm.globals.set(\"webuiArray\",webuiArray);",
							"pm.globals.set(\"artifactTitle\",artifactTitleArray[0] )",
							"pm.globals.set(\"artifactPageId\",pageIdArray[0]);",
							"pm.globals.set(\"webui\",webuiArray[0]);",
							"",
							"",
							"",
							"console.log(\"------------PULLED PAGE----------\")",
							"console.log(\"Pulled Page. pageLoopCount: \" , pm.globals.get(\"pageLoopCount\"))",
							"console.log(\"Revision Key: \" , pm.globals.get(\"revisionKey\"))",
							"console.log(\"pageId array: \" +  pageIdArray)",
							"console.log(\"Webuis: \" +  webuiArray)",
							"console.log(\"artifactPageId\" , pm.globals.get(\"artifactPageId\"))",
							"console.log(\"artifactTitle: \", artifactTitleArray[0])",
							"",
							"",
							"console.log(\"webui\" , pm.globals.get(\"webui\"))",
							"console.log(\"Artifact loopCount in this page: \", pm.globals.get(\"loopCount\"))",
							"console.log(\"numOfLoops: \", pm.globals.get(\"numOfLoops\"))",
							"console.log(\"setLimit: \", pm.globals.get(\"setLimit\"))",
							"console.log(\"pageSize: \", pm.globals.get(\"pageSize\"))",
							"console.log(\"---------------------------------\")",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cb649a76-f121-4f32-9a0d-afc74bde2d5a",
						"exec": [
							"//debugging",
							"//pm.globals.set(\"revisionKey\", \"OPS-2\");",
							"",
							"pm.globals.set(\"pageStart\", 0)",
							"pm.globals.set(\"setLimit\", 500)",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DestUrl}}/wiki/rest/api/content/search?cql=title~\"{{artifactKey}}\"&start={{pageStart}}&limit={{setLimit}}",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"search"
					],
					"query": [
						{
							"key": "cql",
							"value": "title~\"{{artifactKey}}\""
						},
						{
							"key": "start",
							"value": "{{pageStart}}"
						},
						{
							"key": "limit",
							"value": "{{setLimit}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Possible Pages That Are Revision",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b509e23-be3c-4713-9a42-847484ec8f18",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"    //console.log(\"Size of Payload: \",jsonData.size)",
							"    //console.log(\"Limit of Results: \",jsonData.limit)",
							"",
							"pm.globals.set(\"pageSize\", jsonData.size)",
							"pm.globals.set(\"pageLimit\", jsonData.limit)",
							"//pm.globals.set(\"webuiArray\",null);",
							"",
							"var pageIdArray = [];",
							"var webuiArray = [];",
							"",
							"jsonData.results.forEach(function(pageResult)",
							"{",
							"",
							"   //var myRegex = new RegExp(\"(.+-\\d+):\",\"gm\");//the g caused problems in group return",
							"   var revKey = pm.globals.get(\"revisionKey\")",
							"   var myRegex = new RegExp(revKey + \":\");",
							"   //console.log(\"reveKey: \"  + revKey)",
							"   ",
							"   regGroup = (pageResult.title).match(myRegex)",
							"   //console.log(\"regGroup\" + regGroup)",
							"   //console.log(regGroup != null)",
							"   ",
							"   if(regGroup != null){",
							"       //console.log(\"Printing group: \" + regGroup[1])",
							"       pageIdArray.push(pageResult.id)",
							"       webuiArray.push(pageResult._links.webui)",
							"   }",
							"   ",
							"  ",
							"});",
							"",
							"// console.log(\"Key array: \" +  keyArray)",
							"// console.log(\"Webuis: \" +  webuiArray)",
							"",
							"",
							"pm.globals.set(\"loopCount\",0);",
							"//pm.globals.set(\"numOfLoops\",keyArray.length);",
							"pm.globals.set(\"pageIdArray\",pageIdArray);",
							"pm.globals.set(\"webuiArray\",webuiArray);",
							"",
							"pm.globals.set(\"revisionPageId\",pageIdArray[0]);",
							"pm.globals.set(\"webui\",webuiArray[0]);",
							"",
							"",
							"",
							"console.log(\"------------PULLED PAGE----------\")",
							"console.log(\"Pulled Page. pageLoopCount: \" , pm.globals.get(\"pageLoopCount\"))",
							"console.log(\"Revision Key: \" , pm.globals.get(\"revisionKey\"))",
							"console.log(\"pageId array: \" +  pageIdArray)",
							"console.log(\"Webuis: \" +  webuiArray)",
							"console.log(\"revisionPageId\" , pm.globals.get(\"revisionPageId\"))",
							"console.log(\"webui\" , pm.globals.get(\"webui\"))",
							"console.log(\"Artifact loopCount in this page: \", pm.globals.get(\"loopCount\"))",
							"console.log(\"numOfLoops: \", pm.globals.get(\"numOfLoops\"))",
							"console.log(\"setLimit: \", pm.globals.get(\"setLimit\"))",
							"console.log(\"pageSize: \", pm.globals.get(\"pageSize\"))",
							"console.log(\"---------------------------------\")",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e9e4894b-dd2b-4a05-9bd4-5e902c268369",
						"exec": [
							"//debugging",
							"//pm.globals.set(\"revisionKey\", \"OPS-2\");",
							"",
							"pm.globals.set(\"pageStart\", 0)",
							"pm.globals.set(\"setLimit\", 500)",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DestUrl}}/wiki/rest/api/content/search?cql=title~\"{{revisionKey}}\"&start={{pageStart}}&limit={{setLimit}}",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"search"
					],
					"query": [
						{
							"key": "cql",
							"value": "title~\"{{revisionKey}}\""
						},
						{
							"key": "start",
							"value": "{{pageStart}}"
						},
						{
							"key": "limit",
							"value": "{{setLimit}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Copy Revision Over Artifact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b5c61119-d00c-4a19-95ec-81f467dd7484",
						"exec": [
							"//pm.globals.set(\"parentPageId\",null)",
							"console.log(pm.globals.get(\"parentPageId\"));",
							"if(pm.globals.get(\"parentPageId\") == null){",
							"    ",
							"    console.log(\"No parent Id provided, use Space Home Page as parent\");",
							"    ",
							"    //var parentPageId = pm.globals.get(\"homePageId\");",
							"    pm.globals.set(\"parentPageId\", pm.globals.get(\"homePageId\") );",
							"    //pm.globals.set(\"parentPageId\", pm.globals.get(\"homePageId\") );",
							"    //console.log(parentPageId);",
							"    console.log(pm.globals.get(\"parentPageId\"));",
							"}",
							"",
							"//pm.globals.set(\"parentPageId\", pm.globals.get(\"homePageId\") )"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0d9c0f95-a0e7-4a99-ac9f-53ca6f310545",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"//pm.globals.set(\"revisionPageId\", jsonData.id)",
							"",
							"",
							"",
							"//replace v1 header",
							"//.+ac:name=\\\"key\">.+-\\d+<\\/ac:parameter><\\/ac:structured-macro><?\\/?p?>?",
							"",
							"////.+ac:name=\\\\\"key\">.+-\\\\d+<\\\\/ac:parameter><\\\\/ac:structured-macro><?\\\\/?p?>?",
							"",
							"",
							"//replace v2 header",
							"//.+\\/browse\\/.+-\\d+\" data-card-appearance=\"inline\">.+browse\\/.+-\\d+<\\/a><?\\/?p?>?"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"pageTitle\": \"{{artifactTitle}}\",\n  \"copyAttachments\": true,\n  \"copyPermissions\": true,\n  \"copyProperties\": true,\n  \"copyLabels\": true,\n  \"copyCustomContents\": true,\n  \"destination\": {\n    \"type\": \"existing_page\",\n    \"value\": \"{{artifactPageId}}\"\n  }\n  \n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "https://{{DestUrl}}/wiki/rest/api/content/{{revisionPageId}}/copy/",
					"protocol": "https",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"{{revisionPageId}}",
						"copy",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Confluence Version",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9524e566-652e-48a2-97a0-55e2012cef1d",
						"exec": [
							"//testing",
							"//pm.globals.set(\"testPageId\",375655773 )",
							"//pm.globals.set(\"testPageId\",528286164 )"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "595fdd57-ceaa-47ea-a766-e4896861cad9",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"//pm.globals.set(\"editorVersion\", jsonData.version.number)",
							"//console.log(\"Confluence version: \" + jsonData.version.number )",
							"",
							"if(jsonData.metadata.properties.editor == null){",
							"    console.log(\"It's null, brother, confluence v1\")",
							"    pm.globals.set(\"editorVersion\", 1)",
							"}",
							"else",
							"{",
							"    if(jsonData.metadata.properties.editor.value == \"v2\"){",
							"        console.log(\"confluence v2\")",
							"        pm.globals.set(\"editorVersion\", 2)",
							"    }",
							"    else{",
							"         console.log(\"had confluence editor but not 2 \")",
							"        pm.globals.set(\"editorVersion\", 1)",
							"    }",
							"console.log(\"It's here\")",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{DestUrl}}/wiki/rest/api/content/{{artifactPageId}}?expand=metadata.properties.editor",
					"protocol": "https",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"{{artifactPageId}}"
					],
					"query": [
						{
							"key": "expand",
							"value": "metadata.properties.editor"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Header From Artifact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "29a374bd-c5ce-477c-bdaa-a2c8068d3446",
						"exec": [
							"//Script to clone reports based on a configuration file and key input",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"PageBody\", jsonData.body.storage.value);",
							"",
							"",
							"",
							"//Getting files to see if we should go to attachments",
							"//var  stripPatterns = pm.globals.get(\"stripPatterns\").replace(/\\|/g,\",\").split(\",\");",
							"//var  replacePatterns = pm.globals.get(\"replacePatterns\").replace(/\\|/g,\",\").split(\",\");",
							"",
							"var  stripPatterns = pm.globals.get(\"stripPatterns\").split(\"|\");",
							"var  replacePatterns = pm.globals.get(\"replacePatterns\").split(\"|\");",
							"",
							"",
							"console.log(\"Replace Patterns in Test: \" + replacePatterns)",
							"var  count = 0; ",
							"var  pageBody = jsonData.body.storage.value;",
							"",
							"",
							"console.log(\"stripPatterns: \" + stripPatterns)",
							"",
							"stripPatterns.forEach(function(stripPattern)",
							"{",
							"   ",
							"   //stripPattern",
							"   var regStripPattern = new RegExp(stripPattern, 'g');",
							"   console.log(\"regStripPatter: \" + regStripPattern)",
							"   regGroup = (pageBody).match(regStripPattern)",
							"   console.log(\"regex return: \" + regGroup)",
							"   console.log(regGroup)",
							"   console.log(\"Replace Patterns in Test: \" + replacePatterns[count])",
							"   pageBody = pageBody.replace(regStripPattern, replacePatterns[count])",
							" ",
							"   count = count +1 ;",
							"   console.log(\"Printing strip loop count: \" + count)",
							"});",
							"",
							"//this fixes an encoding problem regarding quotes",
							"pageBody = pageBody.replace(/\"/g, '\\\\\"');",
							"",
							"",
							"pm.globals.set(\"PageBody\", pageBody);",
							"console.log(pageBody)",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b833ac4-e173-42e7-9f2f-5c0d710fd2aa",
						"exec": [
							"//pm.globals.set(\"revisionPageId\",393971351 )",
							"",
							"//stripping out Revision control header",
							"pm.globals.set(\"stripPatterns\",\"[\\\\s\\\\S]+for Controlled Document. <\\/span><\\/p>\\n?<hr \\/>\")",
							"",
							"//one that didn't work",
							"//(.|\\\\n)+for Controlled Document. <\\\\/span><\\\\/p>\\\\n?<hr \\\\/>",
							"",
							"",
							"var oldConfHeader =\"<p>Artifact Tag:&nbsp;&nbsp;<ac:structured-macro ac:name=\\\"jira\\\" ac:schema-version=\\\"1\\\" ac:macro-id=\\\"e40e412b-adef-4d8f-8c5b-321da17c5765\\\"><ac:parameter ac:name=\\\"server\\\">System JIRA</ac:parameter><ac:parameter ac:name=\\\"columns\\\">key,summary,type,created,updated,due,assignee,reporter,priority,status,resolution</ac:parameter><ac:parameter ac:name=\\\"serverId\\\">90739ad2-f189-3f93-b74f-6579ab6a553c</ac:parameter><ac:parameter ac:name=\\\"key\\\">{{artifactKey}}</ac:parameter></ac:structured-macro></p>\"",
							"",
							"var newConfHeader =\"<p>Artifact Tag: <a href=\\\"https://upstartnetwork.atlassian.net/browse/{{artifactKey}}\\\" data-card-appearance=\\\"inline\\\">https://upstartnetwork.atlassian.net/browse/{{artifactKey}}</a></p>\"",
							"",
							"if (pm.globals.get(\"editorVersion\") == 2){",
							"    var artifactHeader = newConfHeader",
							"}",
							"else",
							"{",
							"    var artifactHeader = oldConfHeader",
							"}",
							"",
							"pm.globals.set(\"replacePatterns\", artifactHeader)",
							"console.log(\"replacePatterns: \" + pm.globals.get((\"replacePatterns\")))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{sourceUrl}}/wiki/rest/api/content/{{artifactPageId}}?expand=body.storage",
					"protocol": "https",
					"host": [
						"{{sourceUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"{{artifactPageId}}"
					],
					"query": [
						{
							"key": "expand",
							"value": "body.storage"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Version of Artifact",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9738a9f-7342-400d-9bdf-a907023b481c",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.globals.set(\"versionNumber\", jsonData.version.number+1 );",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7f339d7c-67ff-452f-9777-513e6cb4f599",
						"exec": [
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{DestUrl}}/wiki/rest/api/content/{{artifactPageId}}?expand=version",
					"protocol": "https",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"{{artifactPageId}}"
					],
					"query": [
						{
							"key": "expand",
							"value": "version"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Revision With Header",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fa7c9077-1011-457e-8534-f0642414a0dc",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "383d4024-30c5-451c-9619-5575afed9c11",
						"exec": [
							"//var jsonData = JSON.parse(responseBody);",
							"//pm.variables.set(\"pageId\", jsonData.id);",
							"",
							"",
							"//for loop if we need it",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{destAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{destUserName}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"title\": \"{{artifactTitle}}\",\n \"type\": \"page\",\n\n \"status\": \"current\",\n \"version\": {\n   \"number\": {{versionNumber}}\n },\n \"body\":\n    {\"storage\":{\"value\":\n    \"{{PageBody}}\",\n     \"representation\": \"storage\"\n   }}\n}\n\n",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "https://{{DestUrl}}/wiki/rest/api/content/{{artifactPageId}}",
					"protocol": "https",
					"host": [
						"{{DestUrl}}"
					],
					"path": [
						"wiki",
						"rest",
						"api",
						"content",
						"{{artifactPageId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Transition to Remove Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac974a24-355f-437e-9b40-1c033bb084dc",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7ae90947-f2ee-420f-8e49-f51eb58b95b7",
						"exec": [
							"//var loopCount = pm.variables.get(\"loopCount\");",
							"//var numOfLoops =pm.variables.get(\"numOfLoops\");",
							"//var jsonData =pm.variables.get(\"jsonData\");",
							"//console.log(loopCount);",
							"//console.log(numOfLoops);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"transition\": {\n    \"id\": \"61\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{sourceUrl}}/rest/api/3/issue/{{revisionKey}}/transitions",
					"protocol": "https",
					"host": [
						"{{sourceUrl}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"{{revisionKey}}",
						"transitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "End of Loop",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "235d04a2-6cdc-4336-add2-5ea3a92a468c",
						"exec": [
							"var loopCount = pm.globals.get(\"loopCount\");",
							"",
							"loopCount=loopCount+1;",
							" pm.globals.set(\"loopCount\",loopCount);",
							"",
							" postman.setNextRequest(\"Loop For Each Revision\");",
							" pm.globals.set('goto', 'MyRequest');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?test=123",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "test",
							"value": "123"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}