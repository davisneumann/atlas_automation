{
	"info": {
		"_postman_id": "ed390622-61f1-432d-845e-76ba9c635b23",
		"name": "Lessonly API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Lessonly Entitlements Removing Requested - Lessonly",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "432fbe49-2c4c-4a5b-afd7-ef31863f2417",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.variables.set(\"jsonData\",JSON.parse(responseBody));",
							"",
							"//write to counsel the jsonData variable",
							"//console.log(\"Hello\");",
							"//console.log(jsonData);",
							"",
							"//console.log(jsonData.total);",
							"//console.log(jsonData.issues[1])",
							"",
							"",
							"pm.variables.set(\"loopCount\",0);",
							"pm.variables.set(\"numOfLoops\",jsonData.issues.length);",
							"var numOfLoops = pm.variables.get(\"numOfLoops\")",
							"jsonData.issues.forEach(function(issue)",
							"{",
							"    //console.log(issue.key);",
							"    //if (issue.fields.customfield_10171.accountId !== null){",
							"         //console.log(issue.fields.assignee.accountId);",
							"    //    console.log(\"not null\")",
							"    //}",
							"    //else{",
							"    //    console.log(\"null\")",
							"    //}",
							"});",
							"console.log(\"Number of loops to run \" + numOfLoops)",
							"//console.log(numOfissues);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{sourceUrl}}/rest/api/3/search?jql=project%20%3D%20TEAM%20AND%20issuetype%20%3D%20\"Entitlement\"%20AND%20status%20in%20(\"Removal%20Pending\")%20And%20(\"Complete%20At%20This%20Time\"%20<%20now()%20OR%20\"Complete%20At%20This%20Time\"%20is%20EMPTY)%20And%20System%20%3D%20\"Lessonly\"%20ORDER%20BY%20cf%5B10020%5D%20ASC",
					"protocol": "https",
					"host": [
						"{{sourceUrl}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"search"
					],
					"query": [
						{
							"key": "jql",
							"value": "issuetype%20%3D%20Entitlement%20AND%20project%20%3D%20TEAM%20AND%20status%20%3D%20\"Removal%20Pending\"%20AND%20System%20%3D%20OneLogin%20ORDER%20BY%20priority%20DESC",
							"disabled": true
						},
						{
							"key": "jql",
							"value": "project%20%3D%20TEAM%20AND%20issuetype%20%3D%20\"Entitlement\"%20AND%20status%20in%20(\"Removal%20Pending\")%20And%20(\"Complete%20At%20This%20Time\"%20<%20now()%20OR%20\"Complete%20At%20This%20Time\"%20is%20EMPTY)%20And%20System%20%3D%20\"Lessonly\"%20ORDER%20BY%20cf%5B10020%5D%20ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Beginning of Loop",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5b21333d-a598-4ed5-9913-639c1ece3958",
						"exec": [
							"var loopCount = pm.variables.get(\"loopCount\");",
							"var numOfLoops = pm.variables.get(\"numOfLoops\");",
							"var jsonData = pm.variables.get(\"jsonData\");",
							"",
							"console.log(loopCount);",
							"console.log(numOfLoops);",
							"",
							"if (loopCount<numOfLoops){",
							"    console.log(\"No assignee for \" + jsonData.issues[loopCount].key);",
							"    pm.globals.set(\"issueKey\", jsonData.issues[loopCount].key)",
							"    pm.globals.set(\"parentKey\", jsonData.issues[loopCount].fields.parent.key)",
							"    postman.setNextRequest(\"Get Person Email\");",
							"    pm.variables.set('goto', 'MyRequest');",
							"    pm.variables.set(\"loopCount\",loopCount);    ",
							"}",
							"else",
							"{",
							"    console.log(\"End Of Loop\")",
							"    postman.setNextRequest(\"null\");",
							"    pm.variables.set('goto', 'MyRequest');",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?test=123",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "test",
							"value": "123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Person Email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "15d720eb-a234-4481-bcfc-78599b487a14",
						"exec": [
							"",
							"//Variables for Testing. Need to be commented out for PROD",
							"//pm.globals.set(\"parentKey\",\"TEAM-1162\")",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74643019-70d5-414b-abca-da32641640af",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var emailAddy = encodeURI(jsonData.fields.customfield_10115)",
							"pm.globals.set(\"upstartEmail\", emailAddy)",
							"console.log(emailAddy)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "https://upstartnetwork.atlassian.net/rest/api/3/issue/{{parentKey}}",
					"protocol": "https",
					"host": [
						"upstartnetwork",
						"atlassian",
						"net"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"{{parentKey}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Lessonly User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bfd643ad-00ea-48e6-8439-9de47beb8cdb",
						"exec": [
							"//pm.environment.set(\"upstartEmail\", \"test23@upstart.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fb147f9d-fcb4-4963-977a-65cd85e1d998",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log(jsonData)",
							"",
							"if (jsonData.users.length == 0) {",
							"    console.log(\"Bad Return.\")",
							"    // this is the end of logic for loop",
							"    var loopCount = pm.variables.get(\"loopCount\");",
							"    loopCount=loopCount+1;",
							"    pm.variables.set(\"loopCount\",loopCount);",
							"    postman.setNextRequest(\"Beginning of Loop\");",
							"    pm.variables.set('goto', 'MyRequest');",
							"} else {",
							"    console.log(\"Good Return.\")",
							"    //.setNextRequest(\"Transition to Remove\");",
							"    var lessonly_user_id = jsonData.users[0].id",
							"    pm.globals.set(\"lessonly_id_user\", lessonly_user_id)",
							"    console.log(lessonly_user_id)",
							"}",
							"",
							"/*",
							"jsonData.users.forEach(userCheck)",
							"function userCheck(item){",
							"    for (let [key, value] of Object.entries(item)) {",
							"        if (value == 'chris.bowles@upstart.com') {",
							"            console.log ('User email found.')",
							"            var lessonlyID = item.id",
							"            var lessonlyEmail = item.email",
							"            console.log(lessonlyID)",
							"            console.log(lessonlyEmail)",
							"            pm.globals.set(\"lessonID\", lessonlyID);",
							"            pm.globals.set(\"lessonEmail\", lessonlyEmail);",
							"        } else {",
							"            //console.log('User email not here.')",
							"        }",
							"    }",
							"} */",
							"//var lessID = pm.global.get(\"lessonID\");",
							"//var lessEmail = pm.global.get(\"lessonEmail\");",
							"//console.log(lessonID)",
							"//console.log(lessonEmail)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{lessonlyKey}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{lessonlySD}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "SUBDOMAIN",
						"type": "text",
						"value": "{{lessonlySD}}",
						"disabled": true
					},
					{
						"key": "API_KEY",
						"type": "text",
						"value": "{{lessonlyKey}}",
						"disabled": true
					},
					{
						"key": "{{lessonlySD}}",
						"type": "text",
						"value": "{{lessonlyKey}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "https://api.lessonly.com/api/v1/users?filter[email]={{upstartEmail}}",
					"protocol": "https",
					"host": [
						"api",
						"lessonly",
						"com"
					],
					"path": [
						"api",
						"v1",
						"users"
					],
					"query": [
						{
							"key": "SUBDOMAIN",
							"value": "{{lessonlySD}}",
							"disabled": true
						},
						{
							"key": "API_KEY",
							"value": "{{lessonlyKey}}",
							"disabled": true
						},
						{
							"key": null,
							"value": "GET https://api.lessonly.com/api/v1/users?filter[email]=email@example.com  ",
							"disabled": true
						},
						{
							"key": "filter[email]",
							"value": "{{upstartEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b45ba93-2672-4a7f-9de9-d59b5d59c08b",
						"exec": [
							"pm.globals.set(\"lessonID\", \"7953870\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a267f8e8-ffc4-498c-92bd-d8cf4931e76c",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log(jsonData.email)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{lessonlyKey}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{lessonlySD}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.lessonly.com/api/v1/users/{{lessonly_id_user}}/archive",
					"protocol": "https",
					"host": [
						"api",
						"lessonly",
						"com"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{lessonly_id_user}}",
						"archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Lessonly User (Archived)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f325c45d-f9cf-4c57-a2d6-9ec386e376a5",
						"exec": [
							"pm.environment.set(\"upstartEmail\", \"test23@upstart.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "35ad876a-0931-4613-86a2-1567d80a1c4d",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log(jsonData)",
							"",
							"if (jsonData.users[0].archived_at == null) {",
							"    console.log(\"Not archived.\")",
							"    // this is the end of logic for loop",
							"    var loopCount = pm.variables.get(\"loopCount\");",
							"    loopCount=loopCount+1;",
							"    pm.variables.set(\"loopCount\",loopCount);",
							"    postman.setNextRequest(\"Beginning of Loop\");",
							"    pm.variables.set('goto', 'MyRequest');",
							"} else {",
							"    console.log(\"User is archived.\")",
							"    //.setNextRequest(\"Transition to Remove\");",
							"    var lessonly_user_id = jsonData.users[0].id",
							"    pm.globals.set(\"lessonly_id_user\", lessonly_user_id)",
							"    console.log(lessonly_user_id)",
							"}",
							"",
							"/*",
							"jsonData.users.forEach(userCheck)",
							"function userCheck(item){",
							"    for (let [key, value] of Object.entries(item)) {",
							"        if (value == 'chris.bowles@upstart.com') {",
							"            console.log ('User email found.')",
							"            var lessonlyID = item.id",
							"            var lessonlyEmail = item.email",
							"            console.log(lessonlyID)",
							"            console.log(lessonlyEmail)",
							"            pm.globals.set(\"lessonID\", lessonlyID);",
							"            pm.globals.set(\"lessonEmail\", lessonlyEmail);",
							"        } else {",
							"            //console.log('User email not here.')",
							"        }",
							"    }",
							"} */",
							"//var lessID = pm.global.get(\"lessonID\");",
							"//var lessEmail = pm.global.get(\"lessonEmail\");",
							"//console.log(lessonID)",
							"//console.log(lessonEmail)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{lessonlyKey}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{lessonlySD}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "SUBDOMAIN",
						"type": "text",
						"value": "{{lessonlySD}}",
						"disabled": true
					},
					{
						"key": "API_KEY",
						"type": "text",
						"value": "{{lessonlyKey}}",
						"disabled": true
					},
					{
						"key": "{{lessonlySD}}",
						"type": "text",
						"value": "{{lessonlyKey}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "https://api.lessonly.com/api/v1/users?filter[email]={{upstartEmail}}",
					"protocol": "https",
					"host": [
						"api",
						"lessonly",
						"com"
					],
					"path": [
						"api",
						"v1",
						"users"
					],
					"query": [
						{
							"key": "SUBDOMAIN",
							"value": "{{lessonlySD}}",
							"disabled": true
						},
						{
							"key": "API_KEY",
							"value": "{{lessonlyKey}}",
							"disabled": true
						},
						{
							"key": null,
							"value": "GET https://api.lessonly.com/api/v1/users?filter[email]=email@example.com  ",
							"disabled": true
						},
						{
							"key": "filter[email]",
							"value": "{{upstartEmail}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Transition to Remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60faaabc-c635-4a93-a26f-6fbf6b0bdea2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ce0cee67-d9ab-4feb-a7ab-86ee99fa48b2",
						"exec": [
							"var loopCount = pm.variables.get(\"loopCount\");",
							"var numOfLoops =pm.variables.get(\"numOfLoops\");",
							"var jsonData =pm.variables.get(\"jsonData\");",
							"console.log(loopCount);",
							"console.log(numOfLoops);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{sourceAuthToken}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{sourceUserName}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"transition\": {\n    \"id\": \"61\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{sourceUrl}}/rest/api/3/issue/:issueIdOrKey/transitions",
					"protocol": "https",
					"host": [
						"{{sourceUrl}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						":issueIdOrKey",
						"transitions"
					],
					"variable": [
						{
							"key": "issueIdOrKey",
							"value": "{{issueKey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "End of Loop Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c879f93a-e1e2-44ef-96a7-f4ebff6aea58",
						"exec": [
							"var loopCount = pm.variables.get(\"loopCount\");",
							"var numOfLoops =pm.variables.get(\"numOfLoops\");",
							"var jsonData =pm.variables.get(\"jsonData\");",
							"",
							"console.log(loopCount);",
							"console.log(numOfLoops);",
							"",
							"if (loopCount<numOfLoops){",
							"    //another person record, let's go",
							"    ",
							"    console.log(\"Finding if person record has assignee\");",
							"    console.log(\"Custom field for user: \" + jsonData.issues[loopCount].fields.summary)",
							"    ",
							"    ",
							"    if (jsonData.issues[loopCount].fields.summary.accountId !== null){",
							"    //console.log(issue.fields.assignee.accountId);",
							"        postman.setNextRequest(\"Create Atlas 101 Training Checklist\");",
							"        pm.variables.set('goto', 'MyRequest');",
							"    }",
							"    else",
							"    {",
							"        console.log(\"No assignee for\" + jsonData.issues[loopCount].key);",
							"        postman.setNextRequest(\"Beginning of Loop\");",
							"        pm.variables.set('goto', 'MyRequest');",
							"        loopCount=loopCount+1;",
							"        pm.variables.set(\"loopCount\",loopCount);",
							"    }",
							"    ",
							"    ",
							"    ",
							"    //console.log(jsonData.issues[loopCount].key);",
							"   ",
							"    //loopCount=loopCount+1;",
							"    //pm.variables.set(\"loopCount\",loopCount);",
							"    ",
							"    //postman.setNextRequest(\"Stub Example\");",
							"    //pm.variables.set('goto', 'MyRequest');",
							"    ",
							"}",
							"else",
							"{",
							"    console.log(\"End Of Loop\")",
							"    postman.setNextRequest(\"null\");",
							"    pm.variables.set('goto', 'MyRequest');",
							"    ",
							"    ",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d4c2b25-a3be-4c39-a78f-845b3f9e8263",
						"exec": [
							"var loopCount = pm.variables.get(\"loopCount\");",
							"loopCount=loopCount+1;",
							" pm.variables.set(\"loopCount\",loopCount);",
							" postman.setNextRequest(\"Beginning of Loop\");",
							" pm.variables.set('goto', 'MyRequest');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/get?test=123",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "test",
							"value": "123"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}